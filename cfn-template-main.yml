AWSTemplateFormatVersion: 2010-09-09
Description: Create AWS CloudFormation

Parameters:
  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String

  SystemName:
    Description: Name of this system.
    Type: String

Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-${SystemName}-vpc01

  SubnetPublic0101:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      CidrBlock: 10.0.0.0/20
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-${SystemName}-public-subnet-01-01

  SubnetPublic0201:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      CidrBlock: 10.0.16.0/20
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-${SystemName}-public-subnet-02-01

  PublicRouteTable01:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-${SystemName}-public-route-01

  PublicRouteTable02:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-${SystemName}-public-route-02

  PublicSubnetRouteTableAssociation0101:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetPublic0101
      RouteTableId: !Ref PublicRouteTable01

  PublicSubnetRouteTableAssociation0201:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetPublic0201
      RouteTableId: !Ref PublicRouteTable02

  SecurityGroupAPI:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: !Sub ${EnvironmentName}-${SystemName}-sg-api
      GroupDescription: !Sub ${EnvironmentName}-${SystemName}
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 0
          ToPort: 65535
          IpProtocol: tcp
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          FromPort: 0
          ToPort: 65535
          IpProtocol: tcp
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-${SystemName}-sg-api

  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties: {}

  VPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  InternetGatewayRoute01:
    Type: 'AWS::EC2::Route'
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable01
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VPC
      Name: !Sub ${EnvironmentName}-${SystemName}-targetgroup01
      Protocol: HTTP
      ProtocolVersion: HTTP1
      Port: 80
      HealthCheckProtocol: HTTP
      HealthCheckPath: /
      HealthCheckPort: traffic-port
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 2
      HealthCheckTimeoutSeconds: 5
      HealthCheckIntervalSeconds: 30
      Matcher:
        HttpCode: 200
      IpAddressType: ipv4
      TargetType: ip

  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${EnvironmentName}-${SystemName}-alb
      Scheme: internet-facing
      Type: application
      IpAddressType: ipv4
      LoadBalancerAttributes:
        - Key: deletion_protection.enabled
          Value: false
        - Key: idle_timeout.timeout_seconds
          Value: 3600
      SecurityGroups:
        - !Ref SecurityGroupAPI
      Subnets:
        - !Ref SubnetPublic0101
        - !Ref SubnetPublic0201

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      LoadBalancerArn: !Ref ALB

  KMSKey:
    Type: AWS::KMS::Key
    Properties:
      Enabled: true
      EnableKeyRotation: false
      KeyPolicy:
        Version: 2012-10-17
        Id: key-default-1
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action: "kms:*"
            Resource: "*"
      KeySpec: SYMMETRIC_DEFAULT
      KeyUsage: ENCRYPT_DECRYPT
      PendingWindowInDays: 30

  KMSKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub alias/${EnvironmentName}-${SystemName}-alias
      TargetKeyId: !Ref KMSKey

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/ecs/${EnvironmentName}-${SystemName}
      RetentionInDays: 30

  S3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      BucketName: !Sub ${EnvironmentName}-${SystemName}-log
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${EnvironmentName}-${SystemName}-ecs-task-execution-role
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole

  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${EnvironmentName}-${SystemName}-ecs-task-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Sub ${EnvironmentName}-${SystemName}-ecs-task-role-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "ssmmessages:CreateControlChannel"
                  - "ssmmessages:CreateDataChannel"
                  - "ssmmessages:OpenControlChannel"
                  - "ssmmessages:OpenDataChannel"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "logs:DescribeLogGroups"
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogStream"
                  - "logs:DescribeLogStreams"
                  - "logs:PutLogEvents"
                Resource: !GetAtt LogGroup.Arn
              - Effect: Allow
                Action:
                  - "s3:PutObject"
                Resource:
                  - Fn::Join:
                    - ""
                    - - !GetAtt S3Bucket.Arn
                      - /*
              - Effect: Allow
                Action:
                  - "s3:GetEncryptionConfiguration"
                Resource:
                  - Fn::Join:
                    - ""
                    - - !GetAtt S3Bucket.Arn
                      - /*
              - Effect: Allow
                Action:
                  - "kms:Decrypt"
                Resource: !GetAtt KMSKey.Arn

  ECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub ${EnvironmentName}-${SystemName}-repository

Outputs:
  VpcId:
    Value: !Ref VPC
    Export:
      Name: !Sub ${EnvironmentName}-${SystemName}-VPC

  SubnetPublic0101Id:
    Value: !Ref SubnetPublic0101
    Export:
      Name: !Sub ${EnvironmentName}-${SystemName}-SubnetPublic0101

  SubnetPublic0201Id:
    Value: !Ref SubnetPublic0201
    Export:
      Name: !Sub ${EnvironmentName}-${SystemName}-SubnetPublic0201

  SecurityGroupAPIId:
    Value: !Ref SecurityGroupAPI
    Export:
      Name: !Sub ${EnvironmentName}-${SystemName}-sg-api

  LogGroupName:
    Value: !Sub /aws/ecs/${EnvironmentName}-${SystemName}
    Export:
      Name: !Sub ${EnvironmentName}-${SystemName}-log-group

  S3BucketName:
    Value: !Sub ${EnvironmentName}-${SystemName}-log
    Export:
      Name: !Sub ${EnvironmentName}-${SystemName}-s3-bucket

  KMSKeyID:
    Value: !Ref KMSKey
    Export:
      Name: !Sub ${EnvironmentName}-${SystemName}-kms-key-id

  ECSTaskExecutionRoleArn:
    Value: !GetAtt ECSTaskExecutionRole.Arn
    Export:
      Name: !Sub ${EnvironmentName}-${SystemName}-ecs-task-execution-role-arn

  ECSTaskRoleArn:
    Value: !GetAtt ECSTaskRole.Arn
    Export:
      Name: !Sub ${EnvironmentName}-${SystemName}-ecs-task-role-arn

  ECRRepositoryUri:
    Value: !GetAtt ECRRepository.RepositoryUri
    Export:
      Name: !Sub ${EnvironmentName}-${SystemName}-repository-uri
